<?php
ini_set("display_errors", 1);
/**
 * Implements hook_menu().
 */
function results_menu() {
	
	$items['getcode'] = array(
		'title'            	=> t('Generate code'),
		'menu_name'				=>	'main-menu',		
		'page callback'    	=> 'results_getcode',
		'description' 			=> 'Configure terms.',
		'access arguments' 	=> array('generate results code'),
		'weight'					=> 50,
	);
	$items['xmlparse'] = array(
		'title'            	=> t('Generate xml'),
		'menu_name'				=>	'main-menu',		
		'page callback'    	=> 'myxml',
		'description' 			=> 'Configure terms.',
		'access arguments' 	=> array('generate results code'),
		'weight'					=> 51,
	);
	$items['admin/config/development/results'] = array(
		'title' 					=> 'Match Results config',
		'description' 			=> 'Configure results module.',
		'page callback' 		=> 'results_edit_form',
		'access arguments' 	=> array('generate results code'),    
	);	
	return $items;
}  
/**
 * Implements hook_permission().
 */
function results_permission() {
  return array(
    'generate results code' => array(
      'title' 			=> t('Generate coupon codes'),
    ),      
  );
}


################################## code production   #######################################


function results_getcode(){

	//$random = substr(number_format(time() * rand(),0,'',''),0,10);   Numeric
	$random = substr(str_shuffle(MD5(microtime())), 0, 10);				//Alphanumeric

	$query = db_select('results_coupons', 'r');
	$query->fields('r', array('coupon_id'))
  			->condition('r.coupon_id', $random);
	$check = $query->execute();

	if($check->rowCount() == 0){
	
		$nid = db_insert('results_coupons') 
				->fields(array(
				  'coupon_id' => $random,
				  'times_viewed' => 0,
				  'timestamp_created' => REQUEST_TIME,
				))
				->execute();

		$message = 'Valid Code -- coupon created';
		$type = 'status';
	}else{
		$message = 'Invalid Code -- coupon not created';
		$type = 'error';
	}
	
	drupal_set_message($message,$type);
	
	return '<div class="random"><span>Coupon Code : </span> ' . $random . '</div>';

}

################################## code production  END   #######################################


##########################  xml parsing & THEME   #######################################################


function myxml(){

	$path = 'http://external:zxcvbn@drupalcourse.lab.wedia.gr/docs/Lab5-stats.xml';
	$ch = curl_init();
  curl_setopt($ch, CURLOPT_URL,$path);
  curl_setopt($ch, CURLOPT_FAILONERROR,1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 15);
  $retValue =curl_exec($ch);                      
  curl_close($ch);
  header('Content-Type: text/xml');
  $xml = new SimpleXMLElement($retValue);
  $retValue = mb_convert_encoding( $retValue, "utf-8", "HTML-ENTITIES" );
  
  
# Right Version - 2column table #
	$ret = array();
	foreach($xml->team as $item){
		$newarr = get_object_vars($item);
		$ret[] = $newarr;
	}
	$ret = serialize($ret);
	$restable = db_insert('results_table_new')
		->fields(array('results'))
		->values(array(
			'results' => $ret,
		))
		->execute();
	
	//return $ret;

}

//take the attributes from db
function results_page(){

	$query = db_select('results_table_new', 'res');
	$query
		->fields('res', array('results'))
		->orderBy('res.id', 'DESC')
		->range(0, 1);
	$result = $query->execute();
	
	foreach($result as $record){
		//$nid = $record->nid;
		$table = unserialize($record->results);
	}

	
  return theme('results',array('table' => $table) ); 
  //return $content;
}


//theme template
function results_theme($existing, $type, $theme, $path){
  return array(
    'results' => array(
      //'arguments' => array('results' => NULL),
      //'path' => drupal_get_path('module', 'results') . '/theme',
      'variables' => array('table' => NULL),
      'template' => 'theme/results'
    ),
  );
}
##########################  xml parsing & THEME END  #######################################################

###############################  FORMS ########################################### 

function results_edit_form(){
	$content = drupal_get_form('results_config_form');
	return render($content);
}
function results_show_form(){
	$content = drupal_get_form('results_form');
	drupal_set_message('if you own a coupon you can validate it now!');
	return render($content);
}
function results_form(){

	//build form
	$form['legend-text'] = array(
		'#type' 	=> 'fieldset',
		'#title' => 'Please Verify your Coupon',
	);
	
	$form['legend-text']['couponid'] = array(
		'#type' 				=> 'textfield',
		'#title' 			=> t('COUPON ID'),
		'#description' 	=> t('Insert your Coupon ID'),
		'#required'			=> TRUE,
	);	
	$form['submit'] = array(
		'#type' 	=> 'submit',
		'#title' => t('VALIDATE'),
		'#value' => t('VALIDATE'),
	);	

	return $form;
}	
function results_config_form(){
	//build form

	
	$form['legend-results-edit'] = array(
		'#type' 	=> 'fieldset',
		'#title' => 'Enable or Disable Results on Nodes',
	);	
	$form['legend-results-types'] = array(
		'#type' 	=> 'fieldset',
		'#title' => 'Choose node types',
	);	
  $types = node_type_get_types();						// get node types
  $options = array();
  foreach ($types as $type) {
    $options[$type->type] = $type->name;
  }
	if (!empty($options)) { 									//better safe than sorry..
		$form['legend-results-types']['nodetypes'] = array(
			'#type' 				=> 'checkboxes',
			'#title' 			=> 'Node Types',
			'#description'		=> t('Apply Results to only the following node types.'),
			'#multiple'			=> TRUE,
			'#options'			=> $options,
			'#default_value' 	=> variable_get('results_nodes',array()),
		);
	}	
	//exit(var_dump($options));
	
	$form['legend-results-edit']['show_results'] = array(
		'#type' 				=> 'checkbox',
		'#title' 			=> 'Show Results in nodes',  
		'#default_value' 	=> variable_get('show_results'),
	);

	$form['submit'] = array(
		'#type' 	=> 'submit',
		'#title' => t('Configure results'),
		'#value' => t('Configure results'),
	);

	return $form;
}	


function results_config_form_submit($form, &$form_state){
	variable_set('show_results',$form_state['values']['show_results']);
	variable_set('results_nodes',$form_state['values']['nodetypes']);
	
	//prepare message with the checked ones
	foreach ($form_state['values']['nodetypes'] as $types){
		if(array_key_exists($types,$form_state['values']['nodetypes'])){
			$checked[] = $types;
		}
	}
	if(!empty($checked)){
		$list = array(
		  '#theme' => 'list',
		  '#items' => array(),
		);
		foreach ($checked as $sist){
			$list['#items'][] = $sist;
		}
		$response = theme('item_list',$list);
		$response .= t(' Content types are enabled.');
	}else{
		$response = t('No Content Types enabled for results.');
	}	
	
	drupal_set_message($response);
	drupal_set_message(t('Your configuration is saved.'));
}


function results_form_submit($form, &$form_state){

	$coupon_id = $form_state['values']['couponid'];
	
	//validate coupon
	$query = db_select('results_coupons', 'r');
	$query->fields('r', array('coupon_id'))
  			->condition('r.coupon_id', $coupon_id);
	$check = $query->execute();	
	//dpm($query);
	if($check->rowCount() == 1){
	
		if(isset($_SESSION['valid_coupon'])) unset($_SESSION['valid_coupon']); //unset Session if set
		$_SESSION['valid_coupon'] = 'coupon_'.$coupon_id;				//set session
		
		$coupon_updated = db_update('results_coupons') 					//Update Coupons
		  ->fields(array(
			 'active' => 1,
			 'timestamp_activated' => REQUEST_TIME,
		  ))
		  ->condition('coupon_id',$coupon_id)
		  ->execute();	
		  
		  //drupal_set_message('Success!! Coupon is enabled','status');
		  	
		//dpm($_SESSION);
	}else{
		drupal_set_message('Failure -- Not a valid coupon !','error');		
	}
}

###############################  FORMS end ###########################################

#################################### node vieW  ##########################################

/**
 * Implements hook_node_view().
 */
function results_node_view($node, $view_mode, $langcode) {
//session_start();
	$modes = array('full','default'); //include the full mode for clarity
	
	if (in_array($node->type,variable_get('results_nodes'))  and variable_get('show_results') and in_array($view_mode,$modes) ) {
		if(isset($_SESSION['valid_coupon'])) {
	
			$active_coupon = substr($_SESSION['valid_coupon'], -10);

			//validate coupon
			$query = db_select('results_coupons', 'r');						//check active coupon 
			$query->fields('r', array('coupon_id','active'))
		  			->condition('r.coupon_id', $active_coupon)
		  			->condition('r.active', 1);
			$check = $query->execute();
	
	
			if($check->rowCount() != 1){
				drupal_set_message('Your coupon : '.$active_coupon.' is INvalid!','error');
				  $node->content['results_form'] = array(
				  	 '#item'	  => 'item',	
					 '#markup' => results_show_form(),  
				#			 '#theme' => 'mymodule_my_additional_field',
				  );
			}else{
								
				
				if(checkDatesAndViews($active_coupon)){                ####### Perform date and views check
				
						$coupon_updated = db_update('results_coupons') 					//Update How many times viewed
		 				  ->expression('times_viewed', 'times_viewed + :times_viewed', array(':times_viewed' => 1))
						  ->condition('coupon_id',$active_coupon)
						  ->execute();				
						  
						drupal_set_message('You are watching results because your coupon : '.$active_coupon.' is Valid!');
						$node->content['results_table'] = array(
						 '#item'	  => 'item',
						 '#markup' => results_page(), 
						#			 '#theme' => 'mymodule_my_additional_field',
						);
				  }else{
				  		
						$node->content['results_form'] = array(
						 '#item'	  => 'item',
						 '#markup' => results_show_form(), 
						#			 '#theme' => 'mymodule_my_additional_field',
						);				  		
				  }
			}	
		
		
		}else{					###########// SESSION not set
		
			  $node->content['results_form'] = array(
			    '#item'	  => 'item',
				 '#markup' => results_show_form(), 
			#			 '#theme' => 'mymodule_my_additional_field',
			  );		
		}
		  		  
	 } 
	 
}


/**
 * Implements hook_field_extra_fields().
 *
 * Declare our Results fields in manage fields.
 */
function results_field_extra_fields() {
  // The levels of the array that we return correspond to the
  // entity type, bundle and then either 'display' or 'form'.
  // In this case, we apply to 'page' nodes, when we display them.
  $extra = array();
	$ntypes = variable_get('results_nodes',array());
	if(!empty($ntypes)){
		foreach ($ntypes as $types){
			if(array_key_exists($types,$ntypes)){
				$checked[] = $types;													//fill $checked with selected node types
			}
		}
		foreach ($checked as $type){
			$extra['node'][$type]['display'] = array(
			 // The keys here must correspond to the keys of the items
			 // that we add in our hook_node_view() or similar function.
			 'results_form' => array(
				'label' => t('Coupon input Form'),
				'description' => t('Form to place the coupon id, added in results_node_view().'),
				'weight' => 10,
			 ),
			 'results_table' => array(
				'label' => t('Results table'),
				'description' => t('The results table, added in results_node_view().'),
				'weight' => 10,
			 ),    
			);		
		}
	}
	return $extra;
}




function checkDatesAndViews($coupon_id){
	$query = db_select('results_coupons', 'r');						
	$query->fields('r', array('timestamp_activated','times_viewed'))
  			->condition('r.coupon_id', $coupon_id);
	$check = $query->execute();
	
	foreach ($check as $record) {
		$time_activated = $record -> timestamp_activated;
		$views = $record -> times_viewed;
	}
	$numDays = abs(time() - $time_activated)/60/60/24;
	
	
	//for ($i = 0; $i < $numDays; $i++) {
		 $creation_date = date('Y-m-d H:i:s', strtotime("+0 day", $time_activated)) . '<br />';
	//}	
	//exit();
	
	
	if(($numDays <= 1) and ($views < 10)){
		$views_message = $views + 1;
		drupal_set_message('Coupon Activated on '.$creation_date.' viewed '.$views_message.' times','warning');	
		return true;
	}else{
		$coupon_updated = db_update('results_coupons') 					//Update Coupons - deactivate
		  ->fields(array(
			 'active' => 0,
			 'expired' => 1,
		  ))
		  ->condition('coupon_id',$coupon_id)
		  ->execute();	
		  
		  if(isset($_SESSION['valid_coupon'])) unset($_SESSION['valid_coupon']);	
			if($views > 9){
				drupal_set_message('Coupon Expired, content viewed over 10 times','error');
			}else{
				drupal_set_message('Coupon Expired, coupon was activated over a day ago : Coupon activated on '.$creation_date,'error');
			}
		  return false;
	}
	
}

#################### cron 

/**
 * Implements hook_cron().
 */
function results_cron(){
	myxml();
}

/**
 * Implements hook_enable().
 */
function results_enable() {
drupal_set_message($message = t('The Results  module was successfully enabled. Please configure it '.l('here','admin/config/development/results')), $type = 'warning');
}

